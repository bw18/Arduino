// Set pins to the name of each pump to make the code easier to work with
const int pump0 = 0;
const int pump1 = 1;
const int pump2 = 2;
const int pump3 = 3;
const int pump4 = 4;
const int pump5 = 5;
const int pump6 = 6;
const int pump7 = 7;
const int pump8 = 8;
const int pump9 = 9;
const int pump10 = 10;
const int pump11 = 11;
const int pump12 = 12;
const int pump13 = 13;
const int pump14 = A0;

// Create array of pumps
int pumpArray[] = {pump0,pump1,pump2,pump3,pump4,pump5,pump6,pump7,pump8,pump9,pump10,pump11,pump12,pump13,pump14};

// setup timing for the pumps
unsigned long currentTime;
const unsigned long duration = 1700; // Set how long each pump should run for (in milliseconds)
const unsigned long interval = 100; // time before the next pump fires (in milliseconds)
const unsigned long totalTime = (duration * 15) + (interval * 15); // total time it takes to pass through all 15 pumps. This is the control to keep the pumps firing again too soon.
bool initTimes = true;
bool forward = true;

// Create variables to store the timestamp of each pump
unsigned long startPump0;
unsigned long startPump1;
unsigned long startPump2;
unsigned long startPump3;
unsigned long startPump4;
unsigned long startPump5;
unsigned long startPump6;
unsigned long startPump7;
unsigned long startPump8;
unsigned long startPump9;
unsigned long startPump10;
unsigned long startPump11;
unsigned long startPump12;
unsigned long startPump13;
unsigned long startPump14;

// Create Array of pump start times
unsigned long startPump[] = {startPump0,startPump1,startPump2,startPump3,startPump4,startPump5,startPump6,startPump7,startPump8,startPump9,startPump10,startPump11,startPump12,startPump13,startPump14};

void setup() {
  // Set pins to OUTPUT mode
  for (int i = 0; i <= 14; i++){
    pinMode(pumpArray[i], OUTPUT);
  }

  // Set pumps to HIGH (off)
  for (int i = 0; i <= 14; i++){
    digitalWrite(pumpArray[i], HIGH);
  }
}

// Fountain Patterns

void forwardWave(){
  currentTime = millis();

  if (initTimes == true){
    for (int i = 0; i <= 14; i++){
      startPump[i] = currentTime + duration + (interval * i);
    }
    initTimes = false;
  }
  if (forward == true){
    for (int i = 0; i <= 14; i++){
      if (i == 0){
        if (currentTime - startPump[i] >= totalTime){
        startPump[i] = millis();
        digitalWrite(pumpArray[i], LOW);
        }
        if (currentTime - startPump[i] >= duration){
          digitalWrite(pumpArray[i], HIGH);
        }
      }
      else{
        if (currentTime - startPump[0] >= interval * i){
          if (currentTime - startPump[i] >= totalTime){
            startPump[i] = millis();
            digitalWrite(pumpArray[i], LOW);
          }
          if (currentTime - startPump[i] >= duration){
            digitalWrite(pumpArray[i], HIGH);
            if (i == 14){
              forward = false;
              initTimes = true;
            }
          }
        }
      }
    }
  }
}

void reverseWave(){
  currentTime = millis();

  if (initTimes == true){
    for (int i = 14, j = 0; (i >= 0) && (j <= 14); i--, j++){
      startPump[i] = currentTime + duration + (interval * j);
    }
    initTimes = false;
  }
  if (forward == false){
    for (int i = 14, j = 0; (i >= 0) && (j <= 14); i--, j++){
      if (i == 14){
        if (currentTime - startPump[i] >= totalTime){
        startPump[i] = millis();
        digitalWrite(pumpArray[i], LOW);
        }
        if (currentTime - startPump[i] >= duration){
          digitalWrite(pumpArray[i], HIGH);
        }
      }
      else{
        if (currentTime - startPump[14] >= interval * j){
          if (currentTime - startPump[i] >= totalTime){
            startPump[i] = millis();
            digitalWrite(pumpArray[i], LOW);
          }
          if (currentTime - startPump[i] >= duration){
            digitalWrite(pumpArray[i], HIGH);
            if(i == 0){
              forward = true;
              initTimes = true;
            }
          }
        }
      }
    }
  }
}

void loop() {
  forwardWave();
  reverseWave();
}
